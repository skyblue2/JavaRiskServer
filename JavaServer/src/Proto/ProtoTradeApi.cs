// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace technoor.datarequest {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ProtoTradeApi {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_technoor_datarequest_RequestUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::technoor.datarequest.RequestUpdate, global::technoor.datarequest.RequestUpdate.Builder> internal__static_technoor_datarequest_RequestUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_technoor_datarequest_Candle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::technoor.datarequest.Candle, global::technoor.datarequest.Candle.Builder> internal__static_technoor_datarequest_Candle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_technoor_datarequest_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::technoor.datarequest.Response, global::technoor.datarequest.Response.Builder> internal__static_technoor_datarequest_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ProtoTradeApi() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNQcm90b1RyYWRlQXBpLnByb3RvEhR0ZWNobm9vci5kYXRhcmVxdWVzdCJd" + 
          "Cg1SZXF1ZXN0VXBkYXRlEhAKCGluc3ROYW1lGAEgASgJEgoKAmlkGAIgAigF" + 
          "EhkKDG51bU9mUGVyaW9kcxgDIAEoBToDMTAwEhMKB3RpbWVNaW4YBCABKAU6" + 
          "AjEwImkKBkNhbmRsZRIMCgRvcGVuGAEgAigBEg0KBWNsb3NlGAIgAigBEgwK" + 
          "BGhpZ2gYAyABKAESCwoDbG93GAQgASgBEhIKCmV4dHJlbWVsb3cYBSABKAIS" + 
          "EwoLZXh0cmVtZWhpZ2gYBiABKAIiPAoIUmVzcG9uc2USMAoKZGF0YUNhbmRs" + 
          "ZRgBIAMoCzIcLnRlY2hub29yLmRhdGFyZXF1ZXN0LkNhbmRsZQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_technoor_datarequest_RequestUpdate__Descriptor = Descriptor.MessageTypes[0];
        internal__static_technoor_datarequest_RequestUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::technoor.datarequest.RequestUpdate, global::technoor.datarequest.RequestUpdate.Builder>(internal__static_technoor_datarequest_RequestUpdate__Descriptor,
                new string[] { "InstName", "Id", "NumOfPeriods", "TimeMin", });
        internal__static_technoor_datarequest_Candle__Descriptor = Descriptor.MessageTypes[1];
        internal__static_technoor_datarequest_Candle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::technoor.datarequest.Candle, global::technoor.datarequest.Candle.Builder>(internal__static_technoor_datarequest_Candle__Descriptor,
                new string[] { "Open", "Close", "High", "Low", "Extremelow", "Extremehigh", });
        internal__static_technoor_datarequest_Response__Descriptor = Descriptor.MessageTypes[2];
        internal__static_technoor_datarequest_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::technoor.datarequest.Response, global::technoor.datarequest.Response.Builder>(internal__static_technoor_datarequest_Response__Descriptor,
                new string[] { "DataCandle", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RequestUpdate : pb::GeneratedMessage<RequestUpdate, RequestUpdate.Builder> {
    private RequestUpdate() { }
    private static readonly RequestUpdate defaultInstance = new RequestUpdate().MakeReadOnly();
    private static readonly string[] _requestUpdateFieldNames = new string[] { "id", "instName", "numOfPeriods", "timeMin" };
    private static readonly uint[] _requestUpdateFieldTags = new uint[] { 16, 10, 24, 32 };
    public static RequestUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::technoor.datarequest.ProtoTradeApi.internal__static_technoor_datarequest_RequestUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestUpdate, RequestUpdate.Builder> InternalFieldAccessors {
      get { return global::technoor.datarequest.ProtoTradeApi.internal__static_technoor_datarequest_RequestUpdate__FieldAccessorTable; }
    }
    
    public const int InstNameFieldNumber = 1;
    private bool hasInstName;
    private string instName_ = "";
    public bool HasInstName {
      get { return hasInstName; }
    }
    public string InstName {
      get { return instName_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NumOfPeriodsFieldNumber = 3;
    private bool hasNumOfPeriods;
    private int numOfPeriods_ = 100;
    public bool HasNumOfPeriods {
      get { return hasNumOfPeriods; }
    }
    public int NumOfPeriods {
      get { return numOfPeriods_; }
    }
    
    public const int TimeMinFieldNumber = 4;
    private bool hasTimeMin;
    private int timeMin_ = 10;
    public bool HasTimeMin {
      get { return hasTimeMin; }
    }
    public int TimeMin {
      get { return timeMin_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestUpdateFieldNames;
      if (hasInstName) {
        output.WriteString(1, field_names[1], InstName);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[0], Id);
      }
      if (hasNumOfPeriods) {
        output.WriteInt32(3, field_names[2], NumOfPeriods);
      }
      if (hasTimeMin) {
        output.WriteInt32(4, field_names[3], TimeMin);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasInstName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, InstName);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
        }
        if (hasNumOfPeriods) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, NumOfPeriods);
        }
        if (hasTimeMin) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, TimeMin);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RequestUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestUpdate result;
      
      private RequestUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestUpdate original = result;
          result = new RequestUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::technoor.datarequest.RequestUpdate.Descriptor; }
      }
      
      public override RequestUpdate DefaultInstanceForType {
        get { return global::technoor.datarequest.RequestUpdate.DefaultInstance; }
      }
      
      public override RequestUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestUpdate) {
          return MergeFrom((RequestUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestUpdate other) {
        if (other == global::technoor.datarequest.RequestUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInstName) {
          InstName = other.InstName;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNumOfPeriods) {
          NumOfPeriods = other.NumOfPeriods;
        }
        if (other.HasTimeMin) {
          TimeMin = other.TimeMin;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasInstName = input.ReadString(ref result.instName_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 24: {
              result.hasNumOfPeriods = input.ReadInt32(ref result.numOfPeriods_);
              break;
            }
            case 32: {
              result.hasTimeMin = input.ReadInt32(ref result.timeMin_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInstName {
        get { return result.hasInstName; }
      }
      public string InstName {
        get { return result.InstName; }
        set { SetInstName(value); }
      }
      public Builder SetInstName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstName = true;
        result.instName_ = value;
        return this;
      }
      public Builder ClearInstName() {
        PrepareBuilder();
        result.hasInstName = false;
        result.instName_ = "";
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNumOfPeriods {
        get { return result.hasNumOfPeriods; }
      }
      public int NumOfPeriods {
        get { return result.NumOfPeriods; }
        set { SetNumOfPeriods(value); }
      }
      public Builder SetNumOfPeriods(int value) {
        PrepareBuilder();
        result.hasNumOfPeriods = true;
        result.numOfPeriods_ = value;
        return this;
      }
      public Builder ClearNumOfPeriods() {
        PrepareBuilder();
        result.hasNumOfPeriods = false;
        result.numOfPeriods_ = 100;
        return this;
      }
      
      public bool HasTimeMin {
        get { return result.hasTimeMin; }
      }
      public int TimeMin {
        get { return result.TimeMin; }
        set { SetTimeMin(value); }
      }
      public Builder SetTimeMin(int value) {
        PrepareBuilder();
        result.hasTimeMin = true;
        result.timeMin_ = value;
        return this;
      }
      public Builder ClearTimeMin() {
        PrepareBuilder();
        result.hasTimeMin = false;
        result.timeMin_ = 10;
        return this;
      }
    }
    static RequestUpdate() {
      object.ReferenceEquals(global::technoor.datarequest.ProtoTradeApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Candle : pb::GeneratedMessage<Candle, Candle.Builder> {
    private Candle() { }
    private static readonly Candle defaultInstance = new Candle().MakeReadOnly();
    private static readonly string[] _candleFieldNames = new string[] { "close", "extremehigh", "extremelow", "high", "low", "open" };
    private static readonly uint[] _candleFieldTags = new uint[] { 17, 53, 45, 25, 33, 9 };
    public static Candle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Candle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Candle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::technoor.datarequest.ProtoTradeApi.internal__static_technoor_datarequest_Candle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Candle, Candle.Builder> InternalFieldAccessors {
      get { return global::technoor.datarequest.ProtoTradeApi.internal__static_technoor_datarequest_Candle__FieldAccessorTable; }
    }
    
    public const int OpenFieldNumber = 1;
    private bool hasOpen;
    private double open_;
    public bool HasOpen {
      get { return hasOpen; }
    }
    public double Open {
      get { return open_; }
    }
    
    public const int CloseFieldNumber = 2;
    private bool hasClose;
    private double close_;
    public bool HasClose {
      get { return hasClose; }
    }
    public double Close {
      get { return close_; }
    }
    
    public const int HighFieldNumber = 3;
    private bool hasHigh;
    private double high_;
    public bool HasHigh {
      get { return hasHigh; }
    }
    public double High {
      get { return high_; }
    }
    
    public const int LowFieldNumber = 4;
    private bool hasLow;
    private double low_;
    public bool HasLow {
      get { return hasLow; }
    }
    public double Low {
      get { return low_; }
    }
    
    public const int ExtremelowFieldNumber = 5;
    private bool hasExtremelow;
    private float extremelow_;
    public bool HasExtremelow {
      get { return hasExtremelow; }
    }
    public float Extremelow {
      get { return extremelow_; }
    }
    
    public const int ExtremehighFieldNumber = 6;
    private bool hasExtremehigh;
    private float extremehigh_;
    public bool HasExtremehigh {
      get { return hasExtremehigh; }
    }
    public float Extremehigh {
      get { return extremehigh_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpen) return false;
        if (!hasClose) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _candleFieldNames;
      if (hasOpen) {
        output.WriteDouble(1, field_names[5], Open);
      }
      if (hasClose) {
        output.WriteDouble(2, field_names[0], Close);
      }
      if (hasHigh) {
        output.WriteDouble(3, field_names[3], High);
      }
      if (hasLow) {
        output.WriteDouble(4, field_names[4], Low);
      }
      if (hasExtremelow) {
        output.WriteFloat(5, field_names[2], Extremelow);
      }
      if (hasExtremehigh) {
        output.WriteFloat(6, field_names[1], Extremehigh);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOpen) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Open);
        }
        if (hasClose) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Close);
        }
        if (hasHigh) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, High);
        }
        if (hasLow) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Low);
        }
        if (hasExtremelow) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, Extremelow);
        }
        if (hasExtremehigh) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, Extremehigh);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Candle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Candle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Candle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Candle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Candle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Candle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Candle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Candle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Candle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Candle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Candle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Candle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Candle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Candle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Candle result;
      
      private Candle PrepareBuilder() {
        if (resultIsReadOnly) {
          Candle original = result;
          result = new Candle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Candle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::technoor.datarequest.Candle.Descriptor; }
      }
      
      public override Candle DefaultInstanceForType {
        get { return global::technoor.datarequest.Candle.DefaultInstance; }
      }
      
      public override Candle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Candle) {
          return MergeFrom((Candle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Candle other) {
        if (other == global::technoor.datarequest.Candle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpen) {
          Open = other.Open;
        }
        if (other.HasClose) {
          Close = other.Close;
        }
        if (other.HasHigh) {
          High = other.High;
        }
        if (other.HasLow) {
          Low = other.Low;
        }
        if (other.HasExtremelow) {
          Extremelow = other.Extremelow;
        }
        if (other.HasExtremehigh) {
          Extremehigh = other.Extremehigh;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_candleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _candleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasOpen = input.ReadDouble(ref result.open_);
              break;
            }
            case 17: {
              result.hasClose = input.ReadDouble(ref result.close_);
              break;
            }
            case 25: {
              result.hasHigh = input.ReadDouble(ref result.high_);
              break;
            }
            case 33: {
              result.hasLow = input.ReadDouble(ref result.low_);
              break;
            }
            case 45: {
              result.hasExtremelow = input.ReadFloat(ref result.extremelow_);
              break;
            }
            case 53: {
              result.hasExtremehigh = input.ReadFloat(ref result.extremehigh_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpen {
        get { return result.hasOpen; }
      }
      public double Open {
        get { return result.Open; }
        set { SetOpen(value); }
      }
      public Builder SetOpen(double value) {
        PrepareBuilder();
        result.hasOpen = true;
        result.open_ = value;
        return this;
      }
      public Builder ClearOpen() {
        PrepareBuilder();
        result.hasOpen = false;
        result.open_ = 0D;
        return this;
      }
      
      public bool HasClose {
        get { return result.hasClose; }
      }
      public double Close {
        get { return result.Close; }
        set { SetClose(value); }
      }
      public Builder SetClose(double value) {
        PrepareBuilder();
        result.hasClose = true;
        result.close_ = value;
        return this;
      }
      public Builder ClearClose() {
        PrepareBuilder();
        result.hasClose = false;
        result.close_ = 0D;
        return this;
      }
      
      public bool HasHigh {
        get { return result.hasHigh; }
      }
      public double High {
        get { return result.High; }
        set { SetHigh(value); }
      }
      public Builder SetHigh(double value) {
        PrepareBuilder();
        result.hasHigh = true;
        result.high_ = value;
        return this;
      }
      public Builder ClearHigh() {
        PrepareBuilder();
        result.hasHigh = false;
        result.high_ = 0D;
        return this;
      }
      
      public bool HasLow {
        get { return result.hasLow; }
      }
      public double Low {
        get { return result.Low; }
        set { SetLow(value); }
      }
      public Builder SetLow(double value) {
        PrepareBuilder();
        result.hasLow = true;
        result.low_ = value;
        return this;
      }
      public Builder ClearLow() {
        PrepareBuilder();
        result.hasLow = false;
        result.low_ = 0D;
        return this;
      }
      
      public bool HasExtremelow {
        get { return result.hasExtremelow; }
      }
      public float Extremelow {
        get { return result.Extremelow; }
        set { SetExtremelow(value); }
      }
      public Builder SetExtremelow(float value) {
        PrepareBuilder();
        result.hasExtremelow = true;
        result.extremelow_ = value;
        return this;
      }
      public Builder ClearExtremelow() {
        PrepareBuilder();
        result.hasExtremelow = false;
        result.extremelow_ = 0F;
        return this;
      }
      
      public bool HasExtremehigh {
        get { return result.hasExtremehigh; }
      }
      public float Extremehigh {
        get { return result.Extremehigh; }
        set { SetExtremehigh(value); }
      }
      public Builder SetExtremehigh(float value) {
        PrepareBuilder();
        result.hasExtremehigh = true;
        result.extremehigh_ = value;
        return this;
      }
      public Builder ClearExtremehigh() {
        PrepareBuilder();
        result.hasExtremehigh = false;
        result.extremehigh_ = 0F;
        return this;
      }
    }
    static Candle() {
      object.ReferenceEquals(global::technoor.datarequest.ProtoTradeApi.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "dataCandle" };
    private static readonly uint[] _responseFieldTags = new uint[] { 10 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Response ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::technoor.datarequest.ProtoTradeApi.internal__static_technoor_datarequest_Response__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
      get { return global::technoor.datarequest.ProtoTradeApi.internal__static_technoor_datarequest_Response__FieldAccessorTable; }
    }
    
    public const int DataCandleFieldNumber = 1;
    private pbc::PopsicleList<global::technoor.datarequest.Candle> dataCandle_ = new pbc::PopsicleList<global::technoor.datarequest.Candle>();
    public scg::IList<global::technoor.datarequest.Candle> DataCandleList {
      get { return dataCandle_; }
    }
    public int DataCandleCount {
      get { return dataCandle_.Count; }
    }
    public global::technoor.datarequest.Candle GetDataCandle(int index) {
      return dataCandle_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::technoor.datarequest.Candle element in DataCandleList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _responseFieldNames;
      if (dataCandle_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], dataCandle_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::technoor.datarequest.Candle element in DataCandleList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      dataCandle_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Response result;
      
      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::technoor.datarequest.Response.Descriptor; }
      }
      
      public override Response DefaultInstanceForType {
        get { return global::technoor.datarequest.Response.DefaultInstance; }
      }
      
      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Response other) {
        if (other == global::technoor.datarequest.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.dataCandle_.Count != 0) {
          result.dataCandle_.Add(other.dataCandle_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.dataCandle_, global::technoor.datarequest.Candle.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::technoor.datarequest.Candle> DataCandleList {
        get { return PrepareBuilder().dataCandle_; }
      }
      public int DataCandleCount {
        get { return result.DataCandleCount; }
      }
      public global::technoor.datarequest.Candle GetDataCandle(int index) {
        return result.GetDataCandle(index);
      }
      public Builder SetDataCandle(int index, global::technoor.datarequest.Candle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataCandle_[index] = value;
        return this;
      }
      public Builder SetDataCandle(int index, global::technoor.datarequest.Candle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataCandle_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDataCandle(global::technoor.datarequest.Candle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataCandle_.Add(value);
        return this;
      }
      public Builder AddDataCandle(global::technoor.datarequest.Candle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataCandle_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDataCandle(scg::IEnumerable<global::technoor.datarequest.Candle> values) {
        PrepareBuilder();
        result.dataCandle_.Add(values);
        return this;
      }
      public Builder ClearDataCandle() {
        PrepareBuilder();
        result.dataCandle_.Clear();
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::technoor.datarequest.ProtoTradeApi.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
